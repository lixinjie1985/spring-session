管理用户session信息，非常容易支持集群化session而不用关注应用使用什么容器，可以透明
地使用HttpSession替换tomcat容器自身的session机制，session可以存储到redis或mysql中

HttpSession的原理是在任何访问session的动作前加入一个servlet过滤器，在该过滤器里完成
对session的存取。

使用基于redis的HttpSession，可以采用基于Java的spring配置，该配置会负责创建一个过滤器
使用基于redis的HttpSession来替换默认的session机制。@EnableRedisHttpSession注解会创建
一个名字为springSessionRepositoryFilter的spring bean，它是一个过滤器。还需要向容器中
注册一个RedisConnectionFactory接口的实现类，来访问redis。
Java Servlet容器的初始化，首先要创建该过滤器，然后要确保容器把该过滤器应用于所有请求，
为此spring session提供了一个工具类AbstractHttpSessionApplicationInitializer，可以
很容器实现上面两个目的。具体代码参考官方文档该章节部分。

HttpSession集成是如何工作的，自定义一个类来扩展HttpServletRequestWrapper类，重写获取
session的方法，然后在上面的那个过滤器中使用自定义类替换servlet容器自己实现的实现了接口
HttpServletRequest的那个类。后续再获取到的session就是spring session自己实现的
HttpSession了。